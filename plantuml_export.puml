@startumltitle IRC class diagramenum Errors{  ERR_NEEDMOREPARAMS,  ERR_ALREADYREGISTERED  ERR_CHANOPRIVSNEEDED,  ERR_NOSUCHNICK,  ERR_NOSUCHCHANNEL,  ERR_NOTONCHANNEL,  ERR_USERONCHANNEL,  ERR_USERNOTINCHANNEL,  ERR_UNKNOWNMODE,  ERR_BADCHANNELKEY,  ERR_BADCHANNELMASK,  ERR_INVITEONLYCHAN,  ERR_CHANNELISFULL}enum Replies{  RPL_INVITING,  RPL_AWAY,  RPL_NOTOPIC,  RPL_TOPIC,  RPL_CHANNELMODEIS}class IRCException{  const char* what();}class Security{'throws IRCException+ bool isValidPassword(std::string pwd);}class Server{- int server_fd;'default 6667- int port;- std::vector<Client> clients;- Server()' singleton+ getInstance();+ start();+ stop();+ broadcast(Message& m);}class Client{# int client_fd;# char* client_buffer;}class User{'unique [2-9chars]- std::string nickname;- std::string username;- std::string opname;+ std::string getNickname();+ bool isOperator;+ bool isRegistered;+ bool isActive();+ send(Message& m);+ getUserByFd(int client_fd){static};}class CommandFactory{  Command* createCommand(enum commandName);}abstract ACommand{'size [0-15]- std::vector<std::string> parameters- enum commandName;+ virtual void execute(Server& s, Client& c, Message& m);+ virtual void execute(Server& s, Client& c, Channel& chan, Message& m); }class PassCommand{+ void execute(Server& s, Client& c, Message& m);}class NickCommand{+ void execute(Server& s, Client& c, Message& m);}class UserCommand{+ void execute(Server& s, Client& c, Message& m);}class QuitCommand{+ void execute(Server& s, Client& c, Message& m);}class InviteCommand{+ void execute(Server& s, Client& c, Channel& chan, Message& m); }class JoinCommand{+ void execute(Server& s, Client& c, Channel& chan, Message& m); }class KickCommand{+ void execute(Server& s, Client& c, Channel& chan, Message& m); }class PartCommand{+ void execute(Server& s, Client& c, Channel& chan, Message& m); }class TopicCommand{'not necessary ?- std::string& checkTopic();- void setTopic(const std::string& topic);+ void execute(Server& s, Client& c, Channel& chan, Message& m); }class ModeCommand{+ void execute(Server& s, Client& c, Channel& chan, Message& m); }class OperCommand{+ void execute(Server& s, Client& c, Channel& chan, Message& m); }class MessageParser{+ parse()}class Message{- std::string& raw;- time_t sendTime;- const User& sender;- const User& receiver;- enum commandName;- ACommand& parse(std::string& raw);+ void sendToClient(Client& c)+ void sendToUser(void);}class Channel{- std::string name;- std::string topic;- size_t capacity;- vector<Client *> operators;- vector<Client *> users;- vector<Client *> invites;+ const std::string& getTopic() const;+ void setTopic(std::string& t);+ size_t getRemainingCapacity const;+ void addClient(Client& c);+ void removeClient(Client& c);+ void broadcast(Message& m);+ User& findUserByNick(std::string& nickname);+ bool isUserAnOperator(std::string& nickname);+ bool isUserOnChannel(std::string& nickname);}Client <|-- Userstd::exception <|-- IRCExceptionACommand <|-- PassCommandACommand <|-- NickCommandACommand <|-- UserCommandACommand <|-- QuitCommandACommand <|-- InviteCommandACommand <|-- JoinCommandACommand <|-- KickCommandACommand <|-- PartCommandACommand <|-- TopicCommandACommand <|-- ModeCommandACommand <|-- OperCommand@enduml